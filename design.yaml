openapi: 3.0.0
info:
  title: Bank API
  description: This is a Bank API that will be later used in a project
  contact:
    email: 646415@student.inholland.nl
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/646415/Accounts/1.0.0
    description: SwaggerHub API Auto Mocking
security:
  - bearerAuth: []
tags:
  - name: Account
    description: Operations for Accounts
  - name: Customer
    description: Operations for Customers
  - name: User
    description: Operations for Users
  - name: Transaction
    description: Operations for Transactions
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Gets a JWT token
      description: Gets a JWT token
      operationId: login
      requestBody:
        description: Auth details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
            examples:
              Login343:
                $ref: "#/components/examples/Login343"
              Login344:
                $ref: "#/components/examples/Login344"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid status value.
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refreshes a JWT token
      description: Refreshes a JWT token
      operationId: refresh
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid status value.
  /accounts:
    get:
      tags:
        - Account
      summary: Get a list of all accounts
      description: Returns a list of all accounts
      operationId: getAllAccounts
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The number of items to skip before starting to return items
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            maximum: 50
            default: 50
          description: The maximum numbers of items to return (50 max)
          required: false
        - in: query
          name: type
          schema:
            type: string
            enum: [CURRENT, SAVING]
          example: CURRENT
      responses:
        "200":
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountResponse"
        "400":
          description: Bad request.
        "401":
          description: No authorization.
        "403":
          description: Forbidden.
        "500":
          description: Unexpected error.
    post:
      tags:
        - Account
      summary: Create a new account as employee
      description: This can only be done by logged in employee
      operationId: createAccount
      requestBody:
        description: Created Account Object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
            examples:
              Account3:
                $ref: "#/components/examples/Account3"
        required: true
      responses:
        "201":
          description: Account created successfully
        "400":
          description: Bad request
        "401":
          description: No authorization.
        "403":
          description: Forbidden.
        "500":
          description: Unexpected error.
      security: []
  /accounts/{iban}:
    get:
      tags:
        - Account
      summary: "Get an account by its IBAN"
      description: "Returns the account with the given IBAN"
      operationId: getAccountByIban
      parameters:
        - name: iban
          in: path
          description: IBAN of account to return
          required: true
          schema:
            maxLength: 18
            minLength: 18
            type: "string"
            example: "NL22INGB1234567890"
      responses:
        "200":
          description: "Result of selected account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
              examples:
                Account1:
                  $ref: "#/components/examples/Account1"
        "400":
          description: Bad request.
        "401":
          description: No authorization.
        "403":
          description: Forbidden.
        "404":
          description: Account not found.
        "500":
          description: Unexpected error.
  /accounts/findIbanByCustomerName:
    get:
      tags:
        - Account
      summary: "Get an IBAN based on account name"
      description: "Returns the IBAN of given account name"
      operationId: getIbanByName
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: The number of items to skip before starting to return items
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            maximum: 50
            default: 50
          description: The maximum numbers of items to return (50 max)
          required: false
        - name: name
          in: query
          description: Name of customer
          required: true
          schema:
            type: "string"
            example: "Joe"
      responses:
        "200":
          description: "Result of selected account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountFind"
              examples:
                Account1:
                  $ref: "#/components/examples/Account4"
        "400":
          description: Bad request.
        "401":
          description: No authorization.
        "403":
          description: Forbidden.
        "404":
          description: Account not found.
        "500":
          description: Unexpected error.
  /accounts/{iban}/status:
    put:
      tags:
        - Account
      summary: "Add/close account as employee"
      description: "Update the status of the account with the given IBAN as an employee"
      parameters:
        - name: "iban"
          in: "path"
          description: "IBAN of account to update"
          required: true
          schema:
            maxLength: 18
            minLength: 18
            type: "string"
            format: "NL02ABNA0123456789"
        - name: "status"
          in: "query"
          description: "New status of the account (OPEN or CLOSED)"
          required: true
          schema:
            type: "string"
            enum:
              - "OPEN"
              - "CLOSED"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
              examples:
                Account1:
                  $ref: "#/components/examples/Account1"
        "400":
          description: Bad request.
        "403":
          description: Forbidden.
        "401":
          description: No authorization.
        "404":
          description: Account not found.
        "500":
          description: Unexpected error.

  /users:
    get:
      tags:
        - User
      summary: Get a list of all users
      description: Returns a list of all users wich d not have an account
      operationId: getAllUsers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithoutAccount"
        "400":
          description: Invalid status value.
    post:
      tags:
        - User
      summary: register a user
      description: register a new User
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
# this needs to be checked, it was removed from accounts and pasted here
  /users/{iban}/dailyLimit:
    put:
      tags:
        - User
      summary: "Configure daily limit for an user as employee"
      description: "Update the daily limit for the account with the given IBAN as an employee"
      parameters:
        - name: "iban"
          in: "path"
          description: "IBAN of account to update daily limit"
          required: true
          schema:
            maxLength: 18
            minLength: 18
            type: "string"
        - name: "dailyLimit"
          in: "query"
          description: "New daily limit for the account"
          required: true
          schema:
            type: "number"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
        "401":
          description: No authorization.
        "404":
          description: Account not found.
        "500":
          description: Unexpected error.

  /users/{iban}/transferLimit:
    put:
      tags:
        - User
      summary: "Configure transfer limit for an user as employee"
      description: "Update the transfer limit for the account with the given IBAN as an employee"
      parameters:
        - name: "iban"
          in: "path"
          description: "IBAN of account to update transfer limit"
          required: true
          schema:
            maxLength: 18
            minLength: 18
            type: "string"
        - name: "transferLimit"
          in: "query"
          description: "New transfer limit for the account"
          required: true
          schema:
            type: "number"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
        "401":
          description: No authorization.
        "404":
          description: Account not found.
        "500":
          description: Unexpected error.

  /customers:
    get:
      tags:
        - Customer
      summary: Get a list of all customers
      description: Returns a list of all customers
      operationId: getAllCustomers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid status value.

  /customer/{customer_id}:
    put:
      tags:
        - Customer
      summary: Change Customer data
      description: Edit Customer
      parameters:
        - name: customer_id
          in: path
          description: id of cusotmer to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers/{customer_name}:
    get:
      tags:
        - Customer
      summary: Get an User by its Name
      description: Returns the User with the given Name
      operationId: getUserbyName
      parameters:
        - name: customer_name
          in: path
          description: name of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: Max
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid status value
        "404":
          description: Account not found

  /customers/{customer_id}:
    get:
      tags:
        - Customer
      summary: Get logged in User
      description: Returns the User with the given ID
      operationId: getUserbyID
      parameters:
        - name: customer_id
          in: path
          description: id of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid status value
        "404":
          description: Account not found

  /transactions:
    get:
      tags:
        - Transaction
      summary: Retrieve a list of all transactions
      responses:
        "200":
          description: Successful operation
    post:
      tags:
        - Transaction
      summary: Perform a new transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: Transaction created
  /transactions/{transactionId}:
    get:
      tags:
        - Transaction
      summary: Retrieve a specific transaction by ID (or other parameters)
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: iban
          in: query
          required: true
          schema:
            type: string
        - name: balance
          in: query
          required: true
          schema:
            type: number

      responses:
        "200":
          description: Successful operation

  /transactions/atm/deposit:
    post:
      tags:
        - Transaction
      summary: Perform a deposit at an ATM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: Deposit transaction created
  /transactions/atm/withdrawal:
    post:
      tags:
        - Transaction
      summary: Perform a withdrawal at an ATM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: Withdrawal transaction created

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the account
          format: int64
          example: 12
        firstName:
          type: string
          description: User first Name
          example: First
        lastName:
          type: string
          description: User last Name
          example: Last
        password:
          type: string
          description: User password
          example: secret123
        birthDate:
          type: string
          description: Date of Birth
          format: date
          example: "01/10/2000"
        streetName:
          type: string
          example: Schoonzichtlaan
        houseNumber:
          type: integer
          example: 1234
        zipCode:
          type: string
          example: "2015 CV"
        city:
          type: string
          example: Haarlem
        country:
          type: string
          example: Netherlands
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/AccountResponse"
        role:
          type: string
          description: User can be a Customer or Employee(are also Customers)
          enum:
            - CUSTOMER
            - EMPLOYEE
        dailyLimit:
          type: number
          description: The Limit that can be spend in one day
          example: 100
        transactionLimit:
          type: number
          description: The Limit that can be spend in one transaction
          example: 100
    UserWithoutAccount:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the account
          format: int64
          example: 12
        firstName:
          type: string
          description: User first Name
          example: First
        lastName:
          type: string
          description: User last Name
          example: Last
        password:
          type: string
          description: User password
          example: secret123
        birthDate:
          type: string
          description: Date of Birth
          format: date
          example: "01/10/2000"
        streetName:
          type: string
          example: Schoonzichtlaan
        houseNumber:
          type: integer
          example: 1234
        zipCode:
          type: string
          example: "2015 CV"
        city:
          type: string
          example: Haarlem
        country:
          type: string
          example: Netherlands
    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the account
          format: int64
          example: 12
        iban:
          type: string
          description: Account IBAN
          example: NL02ABNA0123456780
        balance:
          type: number
          description: Account balance
          example: 500
        accountType:
          type: string
          description: Account can be of type Current or Savings
          enum:
            - CURRENT
            - SAVINGS
        status:
          type: string
          description: Account can be opened or closed by employee
          enum:
            - OPEN
            - CLOSED
        absoluteLimit:
          type: number
          description: Minimum balance of account
          example: 0
    AccountRequest:
      type: object
      properties:
        iban:
          type: string
          description: Account IBAN
          example: NL02ABNA0123456780
        balance:
          type: number
          description: Account balance
          example: 500
        accountType:
          type: string
          description: Account can be of type Current or Savings
          enum:
            - CURRENT
            - SAVINGS
        status:
          type: string
          description: Account can be opened or closed by employee
          enum:
            - OPEN
            - CLOSED
        absoluteLimit:
          type: number
          description: Minimum balance of account
          example: 0
    AccountFind:
      type: object
      properties:
        iban:
          type: string
          description: Account IBAN
          example: NL02ABNA0123456780
        name:
          type: string
          description: Name of customer
          example: Sasa

    Transaction:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        fromAccountIban:
          type: string
        toAccountIban:
          type: string
        amount:
          type: number
        userId:
          type: integer
          format: int64

    Login:
      type: object
      properties:
        email:
          type: string
          description: Email of the user
          example: someone@gmail.com
        password:
          type: string
          description: Password of the user
          example: somepassword123
    LoginResponse:
      type: object
      properties:
        auth:
          type: string
          description: Auth token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh:
          type: string
          description: Refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJyZWZyZXNoIjp0cnVlfQ.rAFTvBdjOsiHep9peKniaRRZuxU9iAUatILn9SO7V7o
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  examples:
    Login343:
      value:
        email: erwin.devries@inholland.nl
        password: BetterNotLetThemSee!
    Login344:
      value:
        email: erwin.devries2@inholland.nl
        password: BetterNotLetThemSeeThisToo!!!
    Account1:
      value:
        id: 1
        iban: NL02ABNA0123456789
        balance: 0
        accountType: Current
        status: Open
        absoluteLimit: 0
    Account2:
      value:
        id: 2
        iban: NL02ABNA2223456789
        balance: 0
        accountType: Savings
        status: Open
        absoluteLimit: 0
    Account3:
      value:
        iban: NL02ABNA2553456789
        balance: 0
        accountType: Savings
        status: Open
        absoluteLimit: 0
    Account4:
      value:
        iban: NL02ABNA2553456733
        name: Sasa
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
